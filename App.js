import React, { Component } from 'react';
import { Provider } from 'react-redux';
import { YellowBox, BackHandler, DeviceEventEmitter, View, Alert, AsyncStorage, ActivityIndicator } from 'react-native';
import { store, persistor } from './src/Store/index';
import { PersistGate } from 'redux-persist/integration/react'
import Route from './src/Router'
import InitialApp from './src/Controller/InitialController';
import { Actions } from 'react-native-router-flux'
import {isSignedIn} from './src/Controller/AuthUserController'

// import { NotificationsAndroid, PendingNotifications } from 'react-native-notifications';

YellowBox.ignoreWarnings(['Warning: isMounted(...) is deprecated', 'Module RCTImageLoader','Setting a timer']);

// function onNotificationOpened(notification) {
//   console.log("onNotificationOpened: ", notification);
// }
// NotificationsAndroid.setNotificationOpenedListener(onNotificationOpened);

export default class App extends Component {

  componentDidMount(){

    // NotificationsAndroid.localNotification({
    //   title: "Local notification",
    //   body: "This notification was generated by the app!",
    //   extra: "data"
    // });

    // DeviceEventEmitter.removeAllListeners('hardwareBackPress')
    // DeviceEventEmitter.addListener('hardwareBackPress', () => {
    //   try {
    //     isSignedIn().then(res => {
    //       if(res){
    //         Actions.home();
    //       }else{
    //         Actions.login();
    //       }
    //     })
        
    //     return true;
    //   }
    //   catch (err) {
    //     // Alert(err);
    //     BackHandler.exitApp()
    //     // return false;
    //   }
    // })

    // new InitialApp();
  }

  randerLoading = () => {
    return (
      <View style={{
        flex: 1,
        flexDirection: 'column',
        justifyContent: 'space-between',
      }}>
        <ActivityIndicator size="large" style={{ flex: 2 }} />
      </View>
    )
  }

  render() {
    <View>
      ทดสอบการ run app
    </View>
  }

  // render() {
  //   return (
  //     <Provider store={ store }>
  //       <PersistGate loading={ this.randerLoading() } persistor={ persistor }>
  //         <Route/>
  //       </PersistGate>
  //     </Provider>
  //   );
  // }
}

